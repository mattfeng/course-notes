{
    "componentChunkName": "component---src-templates-blogpost-js",
    "path": "/dev/docker",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Docker\"), mdx(\"h2\", null, \"Dockerfile\"), mdx(\"h3\", null, \"Flask app\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"bash\",\n    \"theme\": \"solarized-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"# get requirements\\npip freeze > requirements.txt\"), \"\\n        \"), mdx(\"p\", null, \"Dockerfile:\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"docker\",\n    \"theme\": \"solarized-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"FROM python:3.8.12-buster\\n\\nWORKDIR /app\\n\\n# We copy just the requirements.txt first to leverage Docker cache\\nCOPY ./requirements.txt /app/requirements.txt\\nRUN pip install -r requirements.txt\\n\\nCOPY . /app\\nENTRYPOINT [\\\"gunicorn\\\"]\\nCMD [\\\"--bind\\\", \\\"0.0.0.0:4000\\\", \\\"main:create_app()\\\"]\"), \"\\n        \"), mdx(\"p\", null, \"Build and test the Docker image:\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"bash\",\n    \"theme\": \"solarized-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"# build\\ndocker build -t <image_name>:<tag> .\\n\\n# run\\ndocker run -d -p <host>:<container> <image_name>\"), \"\\n        \"), mdx(\"h2\", null, \"Debugging\"), mdx(\"h3\", null, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"https://docs.docker.com/engine/reference/commandline/exec/\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"docker exec\"))), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"bash\",\n    \"theme\": \"solarized-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"docker exec -it <container> <command> [args]\"), \"\\n        \"), mdx(\"h2\", null, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"docker-compose\")), mdx(\"h3\", null, \"Only run specific containers (useful for development)\"), mdx(\"p\", null, \"Suppose you're developing a Flask application, and you want to run the database in Docker while still developing the application locally. Your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"docker-compose.yml\"), \" file will eventually contain the containerized Flask app, but you don't want to build the Docker image everytime you make a change. Thus, you only want to run the database, but you don't want to remove the configuration for the Flask app.\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"bash\",\n    \"theme\": \"solarized-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"docker-compose up -d <container>\"), \"\\n        \"), mdx(\"h3\", null, \"MongoDB\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"yaml\",\n    \"theme\": \"solarized-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"version: \\\"3.9\\\"\\nservices:\\n  mongodb:\\n    image: mongo:4.4.10\\n    container_name: mongodb\\n    ports:\\n      - 27017:27017\\n    volumes:\\n      - ./db:/data/db\\n    environment:\\n      MONGO_INITDB_ROOT_USERNAME: root\\n      MONGO_INITDB_ROOT_PASSWORD: password\\n      MONGO_INITDB_DATABASE: db\"), \"\\n        \"), mdx(\"p\", null, \"Test connection with:\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"bash\",\n    \"theme\": \"solarized-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"# brew install mongosh\\nmongosh \\\"mongodb://root:password@localhost:27017/db?authSource=admin\\\"\"), \"\\n        \"), mdx(\"h3\", null, \"PostgreSQL\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"yaml\",\n    \"theme\": \"solarized-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"services:\\n  postgres:\\n    image: postgres:14.1\\n    container_name: postgres\\n    environment:\\n      POSTGRES_PASSWORD: password\\n      POSTGRES_USER: user # default: postgres\\n      POSTGRES_DB: db # default: $POSTGRES_USER\\n    ports:\\n      - 5432:5432\\n    volumes:\\n      - ./db:/var/lib/postgresql/data\"), \"\\n        \"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":""}}},"pageContext":{"slug":"dev/docker"}},
    "staticQueryHashes": []}