{
    "componentChunkName": "component---src-templates-blogpost-js",
    "path": "/deep/bio/alphafold",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"AlphaFold 2 (AF2)\"), mdx(\"h2\", null, \"how to use\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"inputs\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"multiple sequence alignment (MSA) should contain \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"at least 30 sequences\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"an MSA of \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"100 sequences\"), \" is generally good enough to use without templates\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"caveats\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"uncertain domain placement\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"AF2 is unaware of membranes; membrane proteins won't leave space for the cell membrane\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"clashes can occur\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"complexes\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"AF2 is trained to only predict single chain protein structures\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"heteromers are more problematic \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"some have success predicting complexes by joining two sequences with a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"linker\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ideas in AF2 can definitely be extended to complexes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"needs to be benchmarked\")))))))), mdx(\"h2\", null, \"model structure\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"three modules: inputs, evoformer, and structure\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"inputs\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"out:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"MSA representation.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"pair representation (templates).\"), \" templates are pairwise amino acid distance predictions\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"evoformer\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"in: MSA, pair representations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"out: refined MSA, pair representations\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"structure\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"in: MSA, pair representations\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"out: list of Cartesian coordinates representing position of each atom of the protein, including sidechains\")))))), mdx(\"h2\", null, \"measures of uncertainty\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"predicted local distance difference test (pLDDT).\"), \" alphafold's per-residue prediction of its lDDT-C\\u03B1; provides a measure of \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"local confidence\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"closely related to \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3799472/\"\n  }, \"lDDT\"), \". measures the percentage of correctly predicted interatomic distances\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ranges from \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"0 to 100\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"prediction files contain the pLDDT in the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"B-factors\"), \" (higher is better, which is opposite of typical B-factors)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"low pLDDT (pLDDT < 50): \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"a prediction of disorder\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"predicted aligned error (PAE).\"), \" alphafold's prediction of its position error at residue \", mdx(\"span\", {\n    parentName: \"li\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"X\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"X\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.68333em\",\n      \"verticalAlign\": \"0em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.07847em\"\n    }\n  }, \"X\"))))), \", if the predicted and true structures were aligned on residue \", mdx(\"span\", {\n    parentName: \"li\",\n    \"className\": \"math math-inline\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-mathml\"\n  }, mdx(\"math\", {\n    parentName: \"span\",\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }, mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"Y\")), mdx(\"annotation\", {\n    parentName: \"semantics\",\n    \"encoding\": \"application/x-tex\"\n  }, \"Y\")))), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"base\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.68333em\",\n      \"verticalAlign\": \"0em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.22222em\"\n    }\n  }, \"Y\"))))), \".\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"displayed as a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"two-dimensional plot\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":""}}},"pageContext":{"slug":"deep/bio/alphafold"}},
    "staticQueryHashes": []}