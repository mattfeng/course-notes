{
    "componentChunkName": "component---src-templates-blogpost-js",
    "path": "/deep/pytorch/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"pytorch\"), mdx(\"h2\", null, \"building modules\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"python\",\n    \"theme\": \"solarized-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"from torch import nn\\n\\ndef NNModule(nn.Module):\\n    def __init__(self):\\n        super(NNModule, self).__init__()\\n        # define module here\\n\\n    # define forward pass here\\n    def forward(self, x):\\n        return output\"), \"\\n        \"), mdx(\"h2\", null, \"training loop\"), mdx(\"deckgo-highlight-code\", {\n    \"language\": \"python\",\n    \"theme\": \"solarized-light\"\n  }, \"\\n          \", mdx(\"code\", {\n    parentName: \"deckgo-highlight-code\",\n    \"slot\": \"code\"\n  }, \"from torch import nn\\nimport torch.optim as optim\\n\\nfrom tqdm import tqdm\\n\\n# define model\\nmodel = define_model()\\n# define optimizer parameters\\nopt_params = {}\\n\\n# define loss function\\n# loss function should take\\n#   in: (model_output, expected_model_output)\\n#   out: a single value (the loss)\\nloss_fn = define_loss_function()\\n\\n# create optimizier\\nopt = optim.Optimizer(model.parameters(), **opt_params)\\n\\n# create dataloader\\n# should be an iterator that returns (X, y)\\ndataloader = define_dataloader()\\n\\n# train loop\\nnum_epochs = 30\\n\\nfor epoch in range(1, num_epochs + 1):\\n\\n    for batch, (X, y) in enumerate(tqdm(dataloader)):\\n        # compute forward pass and loss\\n        pred = model(*inputs)\\n        loss = loss_fn(pred, y)\\n\\n        # backpropagation\\n        opt.zero_grad()\\n        loss.backward()\\n        opt.step()\"), \"\\n        \"), mdx(\"h2\", null, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"https://pytorch.org/docs/stable/optim.html\"\n  }, \"commonly used optimizers (and notes)\")), mdx(\"h3\", null, \"SGD\"), mdx(\"h3\", null, \"RMSprop\"), mdx(\"h3\", null, \"Adagrad\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":""}}},"pageContext":{"slug":"deep/pytorch/"}},
    "staticQueryHashes": []}